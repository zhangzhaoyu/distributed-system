<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd ">

    <!--<debug/>-->
    <context:property-placeholder location="classpath:properties/service.bus.security.properties"  ignore-unresolvable="true" order="7"/>

    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauth2AuthenticationManager"
          entry-point-ref="oauth2AuthenticationEntryPoint">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>

        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <!--system resource server filter-->
    <oauth2:resource-server id="systemResourceServer" resource-id="system-resource" token-services-ref="tokenServices"/>
    <!--service http configuration-->
    <http pattern="/service/**" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager">
        <!--<anonymous enabled="false"/>-->
        <intercept-url pattern="/service/account/register" access="IS_AUTHENTICATED_ANONYMOUSLY" method="POST"/>
        <intercept-url pattern="/service/aniservice/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/service/account/**" access="ROLE_SYS"/>
        <intercept-url pattern="/service/group/**" access="ROLE_SYS"/>
        <custom-filter ref="systemResourceServer" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <!-- Automatically receives AuthenticationEvent messages -->
    <beans:bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

    <beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <!-- Filter将作用于Spring Security的chain 链条中 -->
    <beans:bean id="clientCredentialsTokenEndpointFilter"
                class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>

    <beans:bean id="oauth2AccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <beans:bean id="oauth2AuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>

    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>

    <beans:bean id="oauth2ClientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="cachedAniServiceManagerFacade"/>
    </beans:bean>

    <beans:bean id="jdbcAuthorizationCodeServices"
                class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
        <beans:constructor-arg index="0" ref="accountDataSource"/>
    </beans:bean>

    <beans:bean id="oauthUserApprovalHandler"
                class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
    </beans:bean>

    <!--<beans:bean id="tokenStore" class="com.ani.cel.rect.manager.application.store.JPATokenStore">
    </beans:bean>-->
    <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg index="0" ref="accountDataSource"/>
    </beans:bean>

    <!--Config token services-->
    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="supportRefreshToken" value="true"/>
    </beans:bean>

    <oauth2:authorization-server client-details-service-ref="cachedAniServiceManagerFacade"
                                 token-services-ref="tokenServices"
                                 user-approval-handler-ref="oauthUserApprovalHandler"
                                 user-approval-page="oauth_approval"
                                 error-page="oauth_error">
        <oauth2:authorization-code authorization-code-services-ref="jdbcAuthorizationCodeServices"/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>

    <!-- static resources -->
    <http pattern="/public/**" security="none"/>
    <http disable-url-rewriting="true" entry-point-ref="casEntryPoint" authentication-manager-ref="authenticationManager">
        <intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="/layout/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="/home" access="ROLE_SYS" method="GET"/>
        <intercept-url pattern="/service/**" access="ROLE_SYS" />
        <intercept-url pattern="/oauth/**" access="ROLE_SYS"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <custom-filter ref="requestCasLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="casLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER"/>
        <form-login login-processing-url="/login" login-page="/login.jsp" default-target-url="/home" authentication-failure-url="/login.jsp?auth_code=1"/>

        <logout logout-url="/logout" logout-success-url="/login.jsp?auth_code=0" />
        <!--<logout logout-url="/logout" invalidate-session="false" logout-success-url="/login.jsp?auth_code=0"
                delete-cookies="JSESSIONID"/>-->
        <!--<http-basic/>-->

        <!-- for single user login -->
        <!--<session-management invalid-session-url="/login.jsp?auth_code=3" session-fixation-protection="migrateSession">
            <concurrency-control max-sessions="1"/>
        </session-management>-->
    </http>

    <authentication-manager alias="authenticationManager">
        <!--<authentication-provider ref="authenticationProvider"/>-->
        <authentication-provider ref="casAuthenticationProvider"/>
    </authentication-manager>
    <beans:bean id="authenticationProvider"
                class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="hideUserNotFoundExceptions" value="false"/>
        <beans:property name="userDetailsService" ref="userDetailsServiceImpl"/>
        <beans:property name="messageSource" ref="messageSource"/>
        <beans:property name="passwordEncoder" ref="passwordEncoder"/>
    </beans:bean>

    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <beans:constructor-arg name="strength" value="10" />
    </beans:bean>

    <beans:bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <beans:property name="authenticationUserDetailsService">
            <beans:bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <beans:constructor-arg ref="userDetailsServiceImpl" />
            </beans:bean>
        </beans:property>
        <beans:property name="serviceProperties" ref="serviceProperties"/>
        <beans:property name="ticketValidator">
            <beans:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <beans:constructor-arg index="0" value="${ani.cas.server.hostName}"/>
            </beans:bean>
        </beans:property>
        <beans:property name="key" value="key4CasAuthenticationProvider"/>
        <beans:property name="messageSource" ref="messageSource"/>
    </beans:bean>

    <beans:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <beans:property name="service" value="${ani.service.bus.hostName}/j_spring_cas_security_check"/>
        <beans:property name="authenticateAllArtifacts" value="true"/>
        <beans:property name="sendRenew" value="false"/>
    </beans:bean>
    <beans:bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <beans:property name="loginUrl" value="${ani.cas.server.hostName}/login"/>
        <beans:property name="serviceProperties" ref="serviceProperties"/>
    </beans:bean>
    <beans:bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <!--<beans:property name="filterProcessesUrl" value="/j_spring_cas_security_check"/>-->
    </beans:bean>
    <beans:bean id="casLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <beans:bean id="requestCasLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <beans:constructor-arg value="${ani.cas.server.hostName}/logout"/>
        <beans:constructor-arg>
            <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </beans:constructor-arg>
        <!--<beans:property name="filterProcessesUrl" value="/j_spring_cas_security_check"/>-->
    </beans:bean>
</beans:beans>